Parameter_file_path="/media/l/barracuda2/viraltrack/accessories/"
args <- commandArgs(trailingOnly = T)
suppressMessages(library(Rsubread))
#Loading parameters
Parameter_file_path = args[1]
Parameters = read.table(Parameter_file_path,header = F,sep = "\t")
Parameters = as.character(Parameters$V1)
Parameters = strsplit(Parameters,split = "=",fixed = T)
Parameters_names = unlist(lapply(Parameters,function(x) {x[1]}))
Parameters_values = unlist(lapply(Parameters,function(x) {x[2]}))
names(Parameters_values) = Parameters_names
Output_directory = Parameters_values["Output_directory"] #Output directory
Name_run = make.names(Parameters_values["Name_run"]) #Name of the analytical run
Viral_annotation_file = as.character(Parameters_values["Viral_annotation_file"])
#Loading list files to process
Parameter_target_file = args[2]
File_to_process = read.table(Parameter_target_file,header = F,sep = "\t")
File_to_process = as.character(File_to_process$V1)
File_to_process = unique(File_to_process)
List_names = c()
for (k in File_to_process) {
if (file.exists(k)) {
name_target = base::strsplit(k,"/",fixed = T)
name_target = name_target[[1]]
l = length(name_target)
name_target = name_target[l]
name_target = gsub('/','',name_target)
name_target = gsub('.fastq','',name_target) #Cleaning the name to get the original Amplification batch number
is_gz_file = grepl(pattern = ".gz",name_target)
if (is_gz_file) {
name_target = gsub('.gz','',name_target) #Removing if necesseray the .gz
}
List_names = c(List_names,name_target)
}
}
List_target_path = paste(Output_directory,List_names,"/",sep = "/")
#Loading all viral fragments we detected in each plate
Identified_viral_fragments = c()
for (k in List_target_path) {
name_target = names(k)
report = read.table(paste(k,"/QC_filtered.txt",sep = ""),header = T)
if (nrow(report)>0) {
Identified_viral_fragments = c(Identified_viral_fragments,rownames(report))
}
}
Identified_viral_fragments = unique(Identified_viral_fragments)
Identified_viral_fragments = Identified_viral_fragments[!is.na(Identified_viral_fragments)]
###Finding the path to the GTF : if none fonmd -> 'pseudo GTF' created
Path_GTF = paste0(Output_directory,Name_run,"/","Merged_GTF.txt")
if (!file.exists(Path_GTF)) {
cat("No GTF file found. Creating a basic GTF file ")
#Loading the viral annotation file
Viral_annotation = read.delim(Viral_annotation_file)
Viral_annotation = Viral_annotation[Viral_annotation$Name_sequence!=" ",]
#Selecting the viral segments
Viral_annotation = Viral_annotation[Identified_viral_fragments,]
Length_segments = as.numeric(Viral_annotation$Genome_length)
for (k in 1:length(Identified_viral_fragments)) {
transcript_line = c(Identified_viral_fragments[k],'Empty_Annotation','transcript',1,Length_segments[k],1000,".",".",
paste("gene_id ",Identified_viral_fragments[k],"_1;",""))
}
}
### Counting by itself
Viral_annotation
Parameter_file_path="/media/l/barracuda2/viraltrack/accessories/"
args <- commandArgs(trailingOnly = T)
suppressMessages(library(Rsubread))
#Loading parameters
Parameter_file_path = args[1]
Parameter_file_path="/media/l/barracuda2/viraltrack/accessories/"
args <- commandArgs(trailingOnly = T)
suppressMessages(library(Rsubread))
Parameter_file_path="/media/l/barracuda2/viraltrack/accessories/Parameters.txt"
args <- commandArgs(trailingOnly = T)
suppressMessages(library(Rsubread))
#Loading parameters
#Parameter_file_path = args[1]
Parameters = read.table(Parameter_file_path,header = F,sep = "\t")
Parameters = as.character(Parameters$V1)
Parameters = strsplit(Parameters,split = "=",fixed = T)
Parameters
Parameters_names = unlist(lapply(Parameters,function(x) {x[1]}))
Parameters_values = unlist(lapply(Parameters,function(x) {x[2]}))
names(Parameters_values) = Parameters_names
Output_directory = Parameters_values["Output_directory"] #Output directory
Name_run = make.names(Parameters_values["Name_run"]) #Name of the analytical run
Viral_annotation_file = as.character(Parameters_values["Viral_annotation_file"])
#Loading list files to process
Parameter_target_file = args[2]
File_to_process = read.table(Parameter_target_file,header = F,sep = "\t")
File_to_process = as.character(File_to_process$V1)
File_to_process = unique(File_to_process)
List_names = c()
for (k in File_to_process) {
if (file.exists(k)) {
name_target = base::strsplit(k,"/",fixed = T)
name_target = name_target[[1]]
l = length(name_target)
name_target = name_target[l]
name_target = gsub('/','',name_target)
name_target = gsub('.fastq','',name_target) #Cleaning the name to get the original Amplification batch number
is_gz_file = grepl(pattern = ".gz",name_target)
if (is_gz_file) {
name_target = gsub('.gz','',name_target) #Removing if necesseray the .gz
}
List_names = c(List_names,name_target)
}
}
List_target_path = paste(Output_directory,List_names,"/",sep = "/")
#Loading all viral fragments we detected in each plate
Identified_viral_fragments = c()
for (k in List_target_path) {
name_target = names(k)
report = read.table(paste(k,"/QC_filtered.txt",sep = ""),header = T)
if (nrow(report)>0) {
Identified_viral_fragments = c(Identified_viral_fragments,rownames(report))
}
}
Identified_viral_fragments = unique(Identified_viral_fragments)
Identified_viral_fragments = Identified_viral_fragments[!is.na(Identified_viral_fragments)]
###Finding the path to the GTF : if none fonmd -> 'pseudo GTF' created
Path_GTF = paste0(Output_directory,Name_run,"/","Merged_GTF.txt")
if (!file.exists(Path_GTF)) {
cat("No GTF file found. Creating a basic GTF file ")
#Loading the viral annotation file
Viral_annotation = read.delim(Viral_annotation_file)
Viral_annotation = Viral_annotation[Viral_annotation$Name_sequence!=" ",]
#Selecting the viral segments
Viral_annotation = Viral_annotation[Identified_viral_fragments,]
Length_segments = as.numeric(Viral_annotation$Genome_length)
for (k in 1:length(Identified_viral_fragments)) {
transcript_line = c(Identified_viral_fragments[k],'Empty_Annotation','transcript',1,Length_segments[k],1000,".",".",
paste("gene_id ",Identified_viral_fragments[k],"_1;",""))
}
}
### Counting by itself
Viral_annotation
### Counting by itself
Viral_annotation
#Loading the viral annotation file
Viral_annotation = read.delim(Viral_annotation_file)
Viral_annotation = Viral_annotation[Viral_annotation$Name_sequence!=" ",]
#Selecting the viral segments
Viral_annotation = Viral_annotation[Identified_viral_fragments,]
Length_segments = as.numeric(Viral_annotation$Genome_length)
### Counting by itself
Viral_annotation
Viral_annotation_file
#Loading the viral annotation file
Viral_annotation = read.delim(Viral_annotation_file)
Viral_annotation = Viral_annotation[Viral_annotation$Name_sequence!=" ",]
### Counting by itself
Viral_annotation
#Selecting the viral segments
Viral_annotation = Viral_annotation[Identified_viral_fragments,]
Length_segments = as.numeric(Viral_annotation$Genome_length)
### Counting by itself
Viral_annotation
report = read.table(paste(k,"/QC_filtered.txt",sep = ""),header = T)
stringtie_command = paste("stringtie ","\'",temp_path,k,"_merge.bam\'"," -f 0.01 -g 5 ",
"-o ","\'",temp_path,k,"_annotation.gtf\' "," -l \'",k,"\'",sep = "")
system("ls")
system("stringtie ")
system("stringtie")
system("samtools")
system("stringtie")
system("source ~/.bashrc")
system("source ~/.bashrc")
system2("source ~/.bashrc")
?system2
system2(source, " ~/.bashrc")
system2("source", " ~/.bashrc")
?system
system2("ls", "ll")
system2("ls", "-ll")
system2("source", "~/.bashrc")
system2("source", stdin=" ~/.bashrc")
system2("stringtie")
system2("stringtie ")
system2("samtools")
system2("STAR")
